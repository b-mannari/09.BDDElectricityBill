// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDDElectricityBillKata.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("FCA Slabwise Charges Calculation", Description="As a user I should be be able to calculate the FCA charges slabwise which means t" +
        "he Fuel Cost Adjustment.\r\n       E = A (units) * 0.13 i.e. 13 paise per unit", SourceFile="Features\\FCASlabwiseChargesCalculation.feature", SourceLine=0)]
    public partial class FCASlabwiseChargesCalculationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "FCASlabwiseChargesCalculation.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "FCA Slabwise Charges Calculation", "As a user I should be be able to calculate the FCA charges slabwise which means t" +
                    "he Fuel Cost Adjustment.\r\n       E = A (units) * 0.13 i.e. 13 paise per unit", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units(string units, string fcachargestotal, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("units", units);
            argumentsOfScenario.Add("fcachargestotal", fcachargestotal);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
                    "1 for consumption between 1 to 50 units", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("I consumed {0} units in a given month", units), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When("the state XOZ electricity bill gets generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("the total fca charges as fca amounted to Rs{0}", fcachargestotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "1 for consumption between 1 to 50 units, 1", SourceLine=11)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units_1()
        {
#line 5
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units("1", "0.13", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "1 for consumption between 1 to 50 units, 40", SourceLine=11)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units_40()
        {
#line 5
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units("40", "5.20", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "1 for consumption between 1 to 50 units, 50", SourceLine=11)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units_50()
        {
#line 5
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units("50", "6.50", ((string[])(null)));
#line hidden
        }
        
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units(string units, string fcaslab1Total, string fcaslab2Total, string fcachargestotal, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("units", units);
            argumentsOfScenario.Add("fcaslab1total", fcaslab1Total);
            argumentsOfScenario.Add("fcaslab2total", fcaslab2Total);
            argumentsOfScenario.Add("fcachargestotal", fcachargestotal);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
                    "2 for consumption between 51 to 150 units", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 16
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 17
 testRunner.Given(string.Format("I consumed {0} units in a given month", units), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 18
 testRunner.When("the state XOZ electricity bill gets generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then(string.Format("I should be charged with an fca amount of Rs{0} for Slab1", fcaslab1Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 20
 testRunner.And(string.Format("I should be charged with an fca amount of Rs{0} for Slab2", fcaslab2Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And(string.Format("the total fca charges as fca amounted to Rs{0}", fcachargestotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "2 for consumption between 51 to 150 units, 51", SourceLine=24)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units_51()
        {
#line 16
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units("51", "6.50", "0.13", "6.63", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "2 for consumption between 51 to 150 units, 100", SourceLine=24)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units_100()
        {
#line 16
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units("100", "6.50", "6.50", "13.00", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "2 for consumption between 51 to 150 units, 150", SourceLine=24)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units_150()
        {
#line 16
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units("150", "6.50", "13.00", "19.50", ((string[])(null)));
#line hidden
        }
        
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units(string units, string fcaslab1Total, string fcaslab2Total, string fcaslab3Total, string fcachargestotal, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("units", units);
            argumentsOfScenario.Add("fcaslab1total", fcaslab1Total);
            argumentsOfScenario.Add("fcaslab2total", fcaslab2Total);
            argumentsOfScenario.Add("fcaslab3total", fcaslab3Total);
            argumentsOfScenario.Add("fcachargestotal", fcachargestotal);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
                    "3 for consumption between 151 to 300 units", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given(string.Format("I consumed {0} units in a given month", units), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 31
 testRunner.When("the state XOZ electricity bill gets generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
 testRunner.Then(string.Format("I should be charged with an fca amount of Rs{0} for Slab1", fcaslab1Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
 testRunner.And(string.Format("I should be charged with an fca amount of Rs{0} for Slab2", fcaslab2Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
 testRunner.And(string.Format("I should be charged with an fca amount of Rs{0} for Slab3", fcaslab3Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 35
 testRunner.And(string.Format("the total fca charges as fca amounted to Rs{0}", fcachargestotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "3 for consumption between 151 to 300 units, 151", SourceLine=38)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units_151()
        {
#line 29
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units("151", "6.50", "13.00", "0.13", "19.63", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "3 for consumption between 151 to 300 units, 200", SourceLine=38)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units_200()
        {
#line 29
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units("200", "6.50", "13.00", "6.50", "26.00", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "3 for consumption between 151 to 300 units, 300", SourceLine=38)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units_300()
        {
#line 29
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units("300", "6.50", "13.00", "19.50", "39.00", ((string[])(null)));
#line hidden
        }
        
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units(string units, string fcaslab1Total, string fcaslab2Total, string fcaslab3Total, string fcaslab4Total, string fcachargestotal, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("units", units);
            argumentsOfScenario.Add("fcaslab1total", fcaslab1Total);
            argumentsOfScenario.Add("fcaslab2total", fcaslab2Total);
            argumentsOfScenario.Add("fcaslab3total", fcaslab3Total);
            argumentsOfScenario.Add("fcaslab4total", fcaslab4Total);
            argumentsOfScenario.Add("fcachargestotal", fcachargestotal);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
                    "4 for consumption above 300 units", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 43
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 44
 testRunner.Given(string.Format("I consumed {0} units in a given month", units), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.When("the state XOZ electricity bill gets generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then(string.Format("I should be charged with an fca amount of Rs{0} for Slab1", fcaslab1Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 47
 testRunner.And(string.Format("I should be charged with an fca amount of Rs{0} for Slab2", fcaslab2Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.And(string.Format("I should be charged with an fca amount of Rs{0} for Slab3", fcaslab3Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And(string.Format("I should be charged with an fca amount of Rs{0} for Slab4", fcaslab4Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And(string.Format("the total fca charges as fca amounted to Rs{0}", fcachargestotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "4 for consumption above 300 units, 301", SourceLine=53)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units_301()
        {
#line 43
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units("301", "6.50", "13.00", "19.50", "0.13", "39.13", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "4 for consumption above 300 units, 400", SourceLine=53)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units_400()
        {
#line 43
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units("400", "6.50", "13.00", "19.50", "13.00", "52.00", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the FCA Slabwise Charges for the Domestic Electricity Consumer in Slab " +
            "4 for consumption above 300 units, 1000", SourceLine=53)]
        public virtual void CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units_1000()
        {
#line 43
this.CalculateTheFCASlabwiseChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units("1000", "6.50", "13.00", "19.50", "91.00", "130.00", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
