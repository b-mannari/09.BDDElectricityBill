// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BDDElectricityBillKata.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Energy Charges Calculation", Description="As a user want that this feature should calculate the Energy Charges based on the" +
        " units billed to the Domestic Electricity Consumer for the state ABC\r\nwith A (Sl" +
        "abs) and B (Rate)\t\r\nEnergy Charges C (Charges) = A (Unit Bifurcation) x B (Rate)" +
        "", SourceFile="Features\\EnergyChargesCalculation.feature", SourceLine=0)]
    public partial class EnergyChargesCalculationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "EnergyChargesCalculation.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Energy Charges Calculation", "As a user want that this feature should calculate the Energy Charges based on the" +
                    " units billed to the Domestic Electricity Consumer for the state ABC\r\nwith A (Sl" +
                    "abs) and B (Rate)\t\r\nEnergy Charges C (Charges) = A (Unit Bifurcation) x B (Rate)" +
                    "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units(string units, string slab1Total, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("units", units);
            argumentsOfScenario.Add("slab1total", slab1Total);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 1 for " +
                    "consumption between 1 to 50 units", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("I consumed {0} units in a month", units), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("the state ABDY electricity bill gets generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then(string.Format("the total energy charges as amounted to Rs{0}", slab1Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 1 for " +
            "consumption between 1 to 50 units, 1", SourceLine=12)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units_1()
        {
#line 6
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units("1", "4.05", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 1 for " +
            "consumption between 1 to 50 units, 40", SourceLine=12)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units_40()
        {
#line 6
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units("40", "162.00", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 1 for " +
            "consumption between 1 to 50 units, 50", SourceLine=12)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units_50()
        {
#line 6
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab1ForConsumptionBetween1To50Units("50", "202.50", ((string[])(null)));
#line hidden
        }
        
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units(string units, string slab1Total, string slab2Total, string energytotal, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("units", units);
            argumentsOfScenario.Add("slab1total", slab1Total);
            argumentsOfScenario.Add("slab2total", slab2Total);
            argumentsOfScenario.Add("energytotal", energytotal);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 2 for " +
                    "consumption between 51 to 150 units", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given(string.Format("I consumed {0} units in a month", units), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.When("the state ABDY electricity bill gets generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 21
 testRunner.Then(string.Format("I should be charged with an amount of Rs{0} for Slab 1", slab1Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 22
 testRunner.And(string.Format("I should be charged with an amount of Rs{0} for Slab 2", slab2Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 23
 testRunner.And(string.Format("the total energy charges as amounted to Rs{0}", energytotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 2 for " +
            "consumption between 51 to 150 units, 51", SourceLine=26)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units_51()
        {
#line 18
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units("51", "202.50", "4.95", "207.45", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 2 for " +
            "consumption between 51 to 150 units, 100", SourceLine=26)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units_100()
        {
#line 18
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units("100", "202.50", "247.50", "450.00", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 2 for " +
            "consumption between 51 to 150 units, 150", SourceLine=26)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units_150()
        {
#line 18
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab2ForConsumptionBetween51To150Units("150", "202.50", "495.00", "697.50", ((string[])(null)));
#line hidden
        }
        
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units(string units, string slab1Total, string slab2Total, string slab3Total, string energytotal, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("units", units);
            argumentsOfScenario.Add("slab1total", slab1Total);
            argumentsOfScenario.Add("slab2total", slab2Total);
            argumentsOfScenario.Add("slab3total", slab3Total);
            argumentsOfScenario.Add("energytotal", energytotal);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 3 for " +
                    "consumption between 151 to 300 units", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given(string.Format("I consumed {0} units in a month", units), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.When("the state ABDY electricity bill gets generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Then(string.Format("I should be charged with an amount of Rs{0} for Slab 1", slab1Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.And(string.Format("I should be charged with an amount of Rs{0} for Slab 2", slab2Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 36
 testRunner.And(string.Format("I should be charged with an amount of Rs{0} for Slab 3", slab3Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And(string.Format("the total energy charges as amounted to Rs{0}", energytotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 3 for " +
            "consumption between 151 to 300 units, 151", SourceLine=40)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units_151()
        {
#line 31
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units("151", "202.50", "495.00", "6.30", "703.80", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 3 for " +
            "consumption between 151 to 300 units, 200", SourceLine=40)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units_200()
        {
#line 31
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units("200", "202.50", "495.00", "315.00", "1012.50", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 3 for " +
            "consumption between 151 to 300 units, 300", SourceLine=40)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units_300()
        {
#line 31
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab3ForConsumptionBetween151To300Units("300", "202.50", "495.00", "945.00", "1642.50", ((string[])(null)));
#line hidden
        }
        
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units(string units, string slab1Total, string slab2Total, string slab3Total, string slab4Total, string energytotal, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("units", units);
            argumentsOfScenario.Add("slab1total", slab1Total);
            argumentsOfScenario.Add("slab2total", slab2Total);
            argumentsOfScenario.Add("slab3total", slab3Total);
            argumentsOfScenario.Add("slab4total", slab4Total);
            argumentsOfScenario.Add("energytotal", energytotal);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 4 for " +
                    "consumption above 300 units", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
 testRunner.Given(string.Format("I consumed {0} units in a month", units), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 47
 testRunner.When("the state ABDY electricity bill gets generated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 48
 testRunner.Then(string.Format("I should be charged with an amount of Rs{0} for Slab 1", slab1Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 49
 testRunner.And(string.Format("I should be charged with an amount of Rs{0} for Slab 2", slab2Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And(string.Format("I should be charged with an amount of Rs{0} for Slab 3", slab3Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.And(string.Format("I should be charged with an amount of Rs{0} for Slab 4", slab4Total), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 52
 testRunner.And(string.Format("the total energy charges as amounted to Rs{0}", energytotal), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 4 for " +
            "consumption above 300 units, 301", SourceLine=55)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units_301()
        {
#line 45
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units("301", "202.50", "495.00", "945.00", "6.50", "1649.00", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 4 for " +
            "consumption above 300 units, 400", SourceLine=55)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units_400()
        {
#line 45
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units("400", "202.50", "495.00", "945.00", "650.00", "2292.50", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Calculate the Energy Charges for the Domestic Electricity Consumer in Slab 4 for " +
            "consumption above 300 units, 1000", SourceLine=55)]
        public virtual void CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units_1000()
        {
#line 45
this.CalculateTheEnergyChargesForTheDomesticElectricityConsumerInSlab4ForConsumptionAbove300Units("1000", "202.50", "495.00", "945.00", "4550.00", "6192.50", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
